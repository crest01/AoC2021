// Code generated by re2c 2.2 on Wed Dec  8 23:01:26 2021, DO NOT EDIT.
//go:generate re2go $GOFILE.re -o $GOFILE --no-debug-info -W
package input
import "advent_of_code/day8/signal"


func lex(str *[]byte) []signal.Pattern { // Go code
	var YYMAXFILL int = 1

	str = pad(str, YYMAXFILL)
	limit := len(*str)
	var cursor, s int
	flag := false
	var yyt1 int
	
	var pattern signal.Pattern
	result := make([]signal.Pattern, 0)

loop:
	
{
	var yych byte
	if (limit - cursor < 1) {
		panic("yfill")
	}
	yych = (*str)[cursor]
	switch (yych) {
	case 0x00:
		goto yy2
	case '\n':
		goto yy6
	case '\r':
		fallthrough
	case ' ':
		goto yy8
	case 'a':
		fallthrough
	case 'b':
		fallthrough
	case 'c':
		fallthrough
	case 'd':
		fallthrough
	case 'e':
		fallthrough
	case 'f':
		fallthrough
	case 'g':
		yyt1 = cursor
		goto yy10
	case '|':
		goto yy13
	default:
		goto yy4
	}
yy2:
	cursor += 1
	{ 
		if limit - cursor == YYMAXFILL - 1 {
			return result
		} else {
			panic("parse error!")
		}
	}
yy4:
	cursor += 1
	{ printError(str, cursor-1, cursor) }
yy6:
	cursor += 1
	{ 
		result = append(result, pattern)
		pattern = signal.Pattern{}
		flag = false
		goto loop
	}
yy8:
	cursor += 1
	{ goto loop }
yy10:
	cursor += 1
	if (limit - cursor < 1) {
		panic("yfill")
	}
	yych = (*str)[cursor]
	switch (yych) {
	case 'a':
		fallthrough
	case 'b':
		fallthrough
	case 'c':
		fallthrough
	case 'd':
		fallthrough
	case 'e':
		fallthrough
	case 'f':
		fallthrough
	case 'g':
		goto yy10
	default:
		goto yy12
	}
yy12:
	s = yyt1
	{
		if !flag {
			pattern.S = append(pattern.S, asSignal(str, s, cursor))
		} else {
			pattern.O = append(pattern.O, asSignal(str, s, cursor))
		}
		goto loop
	}
yy13:
	cursor += 1
	{
		flag = true
		goto loop
	}
}

}
