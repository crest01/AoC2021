// Code generated by re2c 2.2 on Mon Dec  6 18:42:57 2021, DO NOT EDIT.
//go:generate re2go $GOFILE.re -o $GOFILE --no-debug-info -W
package input

import (
	"fmt"
	"strconv"
	"strings"
)

func asUInt(str *string, start int, end int) uint64 {
	substr := (*str)[start:end]
	val, err := strconv.Atoi(substr)
	if err != nil {
		panic(err)
	}
	return uint64(val)
}

func printError(str *string, start int, end int) {
	substr := (*str)[start:end]
	fmt.Printf("Error: unexpected input '%s' at position %d", substr, start)
	panic("Unexpected Input")
}

// Pad string with YYMAXFILL zeroes at the end.
func pad(str string) string {
	var YYMAXFILL int = 1

	return str + strings.Repeat("\000", YYMAXFILL)
}

func lex(str string) []uint64 { // Go code
	var cursor int
	limit := len(str)
	fishes := make([]uint64, 9)
	var YYMAXFILL int = 1

loop:

	{
		var yych byte
		if limit-cursor < 1 {
			panic("yfill")
		}
		yych = str[cursor]
		switch yych {
		case 0x00:
			goto yy2
		case '\n':
			goto yy6
		case ',':
			goto yy8
		case '0':
			fallthrough
		case '1':
			fallthrough
		case '2':
			fallthrough
		case '3':
			fallthrough
		case '4':
			fallthrough
		case '5':
			fallthrough
		case '6':
			fallthrough
		case '7':
			fallthrough
		case '8':
			goto yy10
		default:
			goto yy4
		}
	yy2:
		cursor += 1
		{
			if limit-cursor == YYMAXFILL-1 {
				return fishes
			} else {
				panic("parse error!")
			}
		}
	yy4:
		cursor += 1
		{
			printError(&str, cursor-1, cursor)
		}
	yy6:
		cursor += 1
		{
			return fishes
		}
	yy8:
		cursor += 1
		{
			goto loop
		}
	yy10:
		cursor += 1
		{
			idx := asUInt(&str, cursor-1, cursor)
			fishes[idx]++
			goto loop
		}
	}

}
